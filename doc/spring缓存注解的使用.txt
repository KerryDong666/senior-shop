@CacheConfig:
    类级别的注解：如果我们在此注解中定义cacheNames，则此类中的所有方法上 @Cacheable的cacheNames默认都是此值。当然@Cacheable也可以重定义cacheNames的值
    一般需要在需要缓存的类上加此注解,并指明cacheNames的值,否则需要在该类的每个具体上指定,如@Cacheable(cacheNames="book1", key="#id")

@Cacheable:
    一般用在查询方法上,如果缓存中没有方法返回的数据,就先从数据库中查找,查到之后写入redis缓存库中,只要缓存不过期就不会查询数据库,而是从redis中取

    属性的意义:
        cacheNames：指定缓存的名称;

        key：定义组成的key值，如果不定义，则使用全部的参数计算一个key值。可以使用spring El表达式,例子如下:
            @Cacheable(key="#id")
            public Book queryBookCacheable(String id){
            //指定对象的成员变量
            @Cacheable(cacheNames="book1", key="#qry.id")
            public Book queryBookCacheableByBookQry(BookQry qry)

        keyGenerator：定义key生成的类，和key的不能同时存在,如果你的使用很复杂，我们也可以自定义myKeyGenerator的生成key,例子如下:
            // 自定义缓存key的生成类实现如下：
            @Component
            public class MyKeyGenerator implements KeyGenerator {
                @Override
                public Object generate(Object target, Method method, Object... params) {
                    System.out.println("自定义缓存，使用第一参数作为缓存key. params = " + Arrays.toString(params));
                    // 仅仅用于测试，实际不可能这么写
                    return params[0] + "0";
                }
            }
            //使用自定义myKeyGenerator的生成key
            @Cacheable(cacheNames="book3",  keyGenerator="myKeyGenerator")
            public Book queryBookCacheableUseMyKeyGenerator(String id)

        sync：如果设置sync=true：a. 如果缓存中没有数据，多个线程同时访问这个方法，则只有一个方法会执行到方法，其它方法需要等待; b. 如果缓存中已经有数据，则多个线程可以同时从缓存中获取数据

        condition: 在执行方法前，condition的值为true，则缓存数据;
        unless ：在执行方法后，判断unless ，如果值为true，则不缓存数据
        conditon和unless可以同时使用，则此时只缓存同时满足两者的记录.
            //只有id < 3才进行缓存
            @Cacheable(cacheNames="book11", condition="T(java.lang.Integer).parseInt(#id) < 3 ")
            public Book queryBookCacheableWithCondition(String id)
            //查询结果为空就不缓存(只要不为空就缓存)
            @Cacheable(key = "'all_goods'", unless = "#result eq null")
            public List<Goods> selectAll()

@CacheEvict
    删除缓存
    属性的意义:
        allEntries 默认为false,只删除key对应的值的缓存,如果为true则清空指定cacheNames里的所有缓存,例子:
            //清空book1下的所有缓存
            @CacheEvict(cacheNames="book1", allEntries=true)
            public void clearBook1All()
            //对符合key条件的记录从缓存中book1移除
            @CacheEvict(cacheNames="book1", key="#id")
            public void updateBook(String id, String name)

@CachePut
    每次执行都会执行方法，无论缓存里是否有值，同时使用新的返回值的替换缓存中的值。这里不同于@Cacheable：@Cacheable如果缓存没有值，从则执行方法并缓存数据，如果缓存有值，则从缓存中获取值